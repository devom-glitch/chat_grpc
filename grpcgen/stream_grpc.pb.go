// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcgen

import (
	"poc_team1/pb"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamitClient is the client API for Streamit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamitClient interface {
	DataStreamer(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (Streamit_DataStreamerClient, error)
}

type streamitClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamitClient(cc grpc.ClientConnInterface) StreamitClient {
	return &streamitClient{cc}
}

func (c *streamitClient) DataStreamer(ctx context.Context, in *pb.Request, opts ...grpc.CallOption) (Streamit_DataStreamerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamit_ServiceDesc.Streams[0], "/streamit.Streamit/DataStreamer", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamitDataStreamerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamit_DataStreamerClient interface {
	Recv() (*pb.Response, error)
	grpc.ClientStream
}

type streamitDataStreamerClient struct {
	grpc.ClientStream
}

func (x *streamitDataStreamerClient) Recv() (*pb.Response, error) {
	m := new(pb.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamitServer is the server API for Streamit service.
// All implementations must embed UnimplementedStreamitServer
// for forward compatibility
type StreamitServer interface {
	DataStreamer(*pb.Request, Streamit_DataStreamerServer) error
	// mustEmbedUnimplementedStreamitServer()
}

// UnimplementedStreamitServer must be embedded to have forward compatible implementations.
type UnimplementedStreamitServer struct {
}

func (UnimplementedStreamitServer) DataStreamer(*pb.Request, Streamit_DataStreamerServer) error {
	return status.Errorf(codes.Unimplemented, "method DataStreamer not implemented")
}
func (UnimplementedStreamitServer) mustEmbedUnimplementedStreamitServer() {}

// UnsafeStreamitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamitServer will
// result in compilation errors.
type UnsafeStreamitServer interface {
	mustEmbedUnimplementedStreamitServer()
}

func RegisterStreamitServer(s grpc.ServiceRegistrar, srv StreamitServer) {
	s.RegisterService(&Streamit_ServiceDesc, srv)
}

func _Streamit_DataStreamer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pb.Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamitServer).DataStreamer(m, &streamitDataStreamerServer{stream})
}

type Streamit_DataStreamerServer interface {
	Send(*pb.Response) error
	grpc.ServerStream
}

type streamitDataStreamerServer struct {
	grpc.ServerStream
}

func (x *streamitDataStreamerServer) Send(m *pb.Response) error {
	return x.ServerStream.SendMsg(m)
}

// Streamit_ServiceDesc is the grpc.ServiceDesc for Streamit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamit.Streamit",
	HandlerType: (*StreamitServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataStreamer",
			Handler:       _Streamit_DataStreamer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.proto",
}
